use flake

# Function to check if MongoDB container is running
mongodb_running() {
  docker ps --format '{{.Names}}' 2>/dev/null | grep -q '^simciv-mongo$'
}

# Function to check if Colima is running
colima_running() {
  colima status 2>/dev/null | grep -q 'Running'
}

# Start services on macOS
if [[ "$(uname)" == "Darwin" ]]; then
  if ! colima_running; then
    echo "🚀 Starting Colima..."
    colima start --cpu 2 --memory 4 --arch "$(uname -m)" 2>&1 | grep -E '(INFO|done)'
  fi
  
  # Wait a moment for Docker socket to be ready
  sleep 2
  
  # Start MongoDB container if not running
  if ! mongodb_running; then
    echo "🍃 Starting MongoDB container..."
    docker run -d --name simciv-mongo -p 27017:27017 mongo:7.0 >/dev/null 2>&1
    echo "✅ MongoDB started on localhost:27017"
  else
    echo "✅ MongoDB already running on localhost:27017"
  fi
fi

# On Linux, check if user wants to start MongoDB locally
if [[ "$(uname)" == "Linux" ]] && command -v mongod >/dev/null 2>&1; then
  if ! pgrep -x mongod >/dev/null; then
    echo "💡 MongoDB is available but not running. Start it manually if needed:"
    echo "   mongod --dbpath ./data/db"
  fi
fi

# Create cleanup script for stopping MongoDB
cat > .simciv-cleanup.sh << 'EOF'
#!/bin/bash
# Cleanup script for SimCiv MongoDB

mongodb_running() {
  docker ps --format '{{.Names}}' 2>/dev/null | grep -q '^simciv-mongo$'
}

if [[ "$(uname)" == "Darwin" ]]; then
  if mongodb_running; then
    echo "🧹 Stopping MongoDB container..."
    docker stop simciv-mongo >/dev/null 2>&1
    docker rm simciv-mongo >/dev/null 2>&1
    echo "✅ MongoDB stopped"
  fi
fi

# Remove this cleanup script
rm -f .simciv-cleanup.sh
EOF

chmod +x .simciv-cleanup.sh

# Set up trap to cleanup on shell exit (for shells that support it)
if [[ -n "$BASH_VERSION" ]]; then
  trap './.simciv-cleanup.sh 2>/dev/null' EXIT
elif [[ -n "$ZSH_VERSION" ]]; then
  trap './.simciv-cleanup.sh 2>/dev/null' EXIT
fi


