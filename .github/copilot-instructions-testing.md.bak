# Testing Instructions for GitHub Copilot

This document provides instructions for running tests in the SimCiv project.

## Test Types

The project has three types of tests:
1. **Go Unit Tests** - Test the simulation engine and map generation logic
2. **TypeScript Integration Tests** - Test the API endpoints and database interactions
3. **Playwright E2E Tests** - Test the full user interface and workflows

## Running MongoDB for Tests

MongoDB is required for integration tests and e2e tests. Use the `bin/mongo` script from the main branch:

```bash
# Get the mongo script from main branch
git show main:bin/mongo > /tmp/mongo-script.sh
chmod +x /tmp/mongo-script.sh

# Start MongoDB in Docker container
/tmp/mongo-script.sh start

# Check status
/tmp/mongo-script.sh status

# Stop when done
/tmp/mongo-script.sh stop
```

This script automatically:
- Starts a MongoDB 7.0 Docker container named `simciv-mongo`
- Exposes it on `localhost:27017`
- Handles both Linux and macOS (with Colima)

## Running Go Unit Tests

Go tests can be run without any external dependencies:

```bash
cd simulation
go test ./... -v
```

Or to test specific packages:

```bash
# Test map generation only
go test ./pkg/mapgen -v

# Test engine only
go test ./pkg/engine -v

# Test models only
go test ./pkg/models -v
```

**Expected Results:**
- All tests should pass
- Map generation tests verify terrain variety, resource distribution, and player placement
- Engine tests verify game tick processing and map generation triggers

## Running TypeScript Integration Tests

TypeScript integration tests require MongoDB to be running. There are two options:

### Option 1: Use External MongoDB (Recommended)

If MongoDB is running on localhost:

```bash
TEST_MONGO_URI="mongodb://localhost:27017" npm test
```

### Option 2: Use MongoDB Memory Server

The tests will attempt to use `mongodb-memory-server` by default if `TEST_MONGO_URI` is not set:

```bash
npm test
```

**Note:** MongoDB Memory Server may have download issues in some environments. If tests timeout or fail with download errors, use Option 1 with an external MongoDB instance.

**Expected Results:**
- Integration tests for map API endpoints should pass
- Tests verify authentication, authorization, and data filtering
- Tests verify correct error handling for invalid requests

## Running Playwright E2E Tests

E2E tests require both the server and simulation to be running.

### Setup

1. Start MongoDB:
```bash
mongod --dbpath /path/to/data
```

2. Start the simulation engine:
```bash
cd simulation
./simulation
```

3. Start the web server:
```bash
npm start
```

### Run Tests

In a new terminal:

```bash
npm run test:e2e
```

To run specific test files:

```bash
npx playwright test e2e/map-view.spec.ts
```

To run with UI mode (interactive):

```bash
npx playwright test --ui
```

**Expected Results:**
- E2E tests should pass with screenshots captured in `e2e-screenshots/`
- Map view tests verify that maps are displayed correctly in the browser
- Tests verify starting city markers, resource markers, and terrain rendering

## Test Coverage

### Go Tests

**Map Generation (`simulation/pkg/mapgen/generator_test.go`)**
- `TestNewGenerator` - Verifies map dimensions based on player count
- `TestGenerateMap_Basic` - Tests basic map generation succeeds
- `TestGenerateMap_Deterministic` - Verifies same seed produces same map
- `TestGenerateMap_TerrainVariety` - Checks for diverse terrain types
- `TestGenerateMap_ResourceDistribution` - Verifies resources are placed
- `TestGenerateMap_StartingPositions` - Tests player placement algorithm
- `TestGenerateMap_TileVisibility` - Verifies visibility tracking

**Engine (`simulation/pkg/engine/engine_test.go`)**
- `TestGameEngine_ProcessTick` - Tests game tick processing
- `TestGameEngine_SkipWaitingGames` - Verifies waiting games don't tick
- `TestGameEngine_MultipleGames` - Tests handling multiple games
- `TestGameEngine_YearProgression` - Tests time advancement
- `TestGameEngine_TickTiming` - Tests tick timing logic
- `TestGameEngine_MapGenerationOnFirstTick` - Verifies map generates on game start
- `TestGameEngine_MapGenerationOnlyOnFirstTick` - Verifies map only generates once

### TypeScript Integration Tests

**Map API (`src/__tests__/integration/map.test.ts`)**
- Tests for `GET /api/map/:gameId/metadata`
  - Returns metadata for authenticated users
  - Returns 401 for unauthenticated users
  - Returns 404 for non-existent games
- Tests for `GET /api/map/:gameId/tiles`
  - Returns visible tiles for authenticated users
  - Returns 401 for unauthenticated users
  - Returns empty array when player has no visible tiles
- Tests for `GET /api/map/:gameId/starting-position`
  - Returns starting position for authenticated users
  - Returns 401 for unauthenticated users
  - Returns 404 when player has no starting position

### Playwright E2E Tests

**Map View (`e2e/map-view.spec.ts`)**
- `should display map when game is started` - Verifies map renders in browser
- `should show starting city marker on map` - Tests city marker display
- `should show resource markers on tiles with resources` - Tests resource indicators
- `should not show map for waiting games` - Verifies map only shows for started games

## Troubleshooting

### MongoDB Memory Server Issues

If you see errors like:
```
DownloadError: Download failed for url "https://fastdl.mongodb.org/..."
```

Use external MongoDB instead:
```bash
TEST_MONGO_URI="mongodb://localhost:27017" npm test
```

### E2E Test Timeouts

If E2E tests timeout:
1. Verify MongoDB is running
2. Verify the simulation engine is running
3. Verify the web server is running on port 3000
4. Check that no other process is using port 3000

### Go Test Failures

If Go tests fail:
1. Ensure Go 1.21+ is installed
2. Run `go mod tidy` to update dependencies
3. Check that the simulation code compiles: `go build`

## Test Maintenance

When adding new features:

1. **Add Go unit tests** for new simulation logic in `simulation/pkg/*/`
2. **Add TypeScript integration tests** for new API endpoints in `src/__tests__/integration/`
3. **Add E2E tests** for new UI features in `e2e/`
4. **Update this document** if new test types or procedures are added

## Continuous Integration

Tests should be run automatically in CI/CD pipelines:

```yaml
# Example GitHub Actions workflow
- name: Run Go tests
  run: cd simulation && go test ./...

- name: Run TypeScript tests
  run: TEST_MONGO_URI=${{ secrets.MONGO_URI }} npm test

- name: Run E2E tests
  run: npm run test:e2e
```

Always ensure:
- All unit tests pass before merging
- Integration tests pass with external MongoDB
- E2E tests pass with screenshots captured
- No tests are skipped or disabled without justification
